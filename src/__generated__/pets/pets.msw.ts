/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Petstore
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { http, HttpResponse } from "msw";
import type { Error, Pet, Pets } from "../petstore.schemas";

export const getListPetsResponseMock = (): Pets => [
  { id: 0, name: "„Éù„ÉÅ", tag: "Áä¨" },
  { id: 1, name: "„Çø„Éû", tag: "Áå´" },
  { id: 2, name: "„Éö„É™„Éº", tag: "È≥•" },
];

export const getListPetsResponseMock200 = (): Pets => [
  { id: 0, name: "„Éù„ÉÅ", tag: "Áä¨" },
  { id: 1, name: "„Çø„Éû", tag: "Áå´" },
  { id: 2, name: "„Éö„É™„Éº", tag: "È≥•" },
];

export const getListPetsResponseMock500 = (
  overrideResponse: Partial<Error> = {},
): Error => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha(20),
  ...overrideResponse,
});

export const getCreatePetsResponseMockDefault = (
  overrideResponse: Partial<Error> = {},
): Error => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha(20),
  ...overrideResponse,
});

export const getShowPetByIdResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
});

export const getShowPetByIdResponseMock200 = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
});

export const getShowPetByIdResponseMock500 = (
  overrideResponse: Partial<Error> = {},
): Error => ({
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha(20),
  ...overrideResponse,
});

export const getListPetsMockHandler = (
  overrideResponse?:
    | Pets
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pets> | Pets),
) => {
  return http.get("http://localhost:8080/pets", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListPetsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListPetsMockHandler200 = (
  overrideResponse?:
    | Pets
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pets> | Pets),
) => {
  return http.get("http://localhost:8080/pets", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListPetsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListPetsMockHandler500 = (
  overrideResponse?:
    | Error
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Error> | Error),
) => {
  return http.get("http://localhost:8080/pets", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListPetsResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreatePetsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("http://localhost:8080/pets", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getCreatePetsMockHandler201 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("http://localhost:8080/pets", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getCreatePetsMockHandlerDefault = (
  overrideResponse?:
    | Error
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Error> | Error),
) => {
  return http.post("http://localhost:8080/pets", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreatePetsResponseMockDefault(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getShowPetByIdMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.get("http://localhost:8080/pets/:petId", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getShowPetByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getShowPetByIdMockHandler200 = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.get("http://localhost:8080/pets/:petId", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getShowPetByIdResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getShowPetByIdMockHandler500 = (
  overrideResponse?:
    | Error
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Error> | Error),
) => {
  return http.get("http://localhost:8080/pets/:petId", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getShowPetByIdResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getPetsMock = () => [
  getListPetsMockHandler(),
  getCreatePetsMockHandler(),
  getShowPetByIdMockHandler(),
];
